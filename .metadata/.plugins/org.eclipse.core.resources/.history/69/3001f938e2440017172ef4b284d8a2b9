import java.awt.Color;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.Set;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class DrawLine extends JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public static void main(String[] args) {

		panel paint1 = new panel();
		/*
		 * paintP.add(paint1, BorderLayout.CENTER);
		 * paintP.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		 * paintP.setSize(400,400); paintP.setVisible(true);
		 */
		paint1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		paint1.setSize(400, 400);
		paint1.setVisible(true);
		
	}

	private class panel extends JPanel {
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		private Point points[] = new Point[10000];
		private Point pointends[] = new Point[10000];

		private int count = 0;

		public panel() {
			setBackground(Color.BLACK);
			MouseHandler mouse = new MouseHandler();
			this.addMouseMotionListener(mouse);
			this.addMouseListener(mouse);
		}

		@Override
		protected void paintComponent(Graphics g) {
			// TODO Auto-generated method stub
			super.paintComponent(g);
			for (int i = 0; i < count; i++) {
				g.setColor(Color.RED);
				g.drawLine(points[i].x, points[i].y, pointends[i].x, pointends[i].y);
			}
		}

		public class MouseHandler extends MouseAdapter {
			public void mouseDragged(MouseEvent e) {
				points[count - 1] = e.getPoint();
				repaint();
			}
		}
	}
}