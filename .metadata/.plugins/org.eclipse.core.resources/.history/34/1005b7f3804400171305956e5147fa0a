import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JPanel;


public class DrawLine extends JPanel implements MouseListener, MouseMotionListener{
	
	private ArrayList<Point> points = new ArrayList<Point>();
	
	  public static void main(String[] args) {
		    new DrawLine();
		  }

		  public DrawLine() {
		    this.setSize(300, 300);
		    this.setVisible(true);
	        setPreferredSize(new Dimension(1280, 700));
	        setBounds(0, 0, 1280, 700);
	        setBackground(Color.WHITE);
	        addMouseListener(this);
	        addMouseMotionListener(this);
		  }


	@Override
	public void mouseDragged(MouseEvent e) {
		// TODO Auto-generated method stub
	    points.add(e.getPoint());
	    repaint();
			}

	@Override
	public void mouseMoved(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	
	protected void paintComponent(Graphics g)
	{
	    super.paintComponent(g);

	    for (int i = 0; i < points.size() - 2; i++)
	    {
	        Point p1 = points.get(i);
	        Point p2 = points.get(i + 1);

	        g.drawLine(p1.x, p1.y, p2.x, p2.y);
	    }
	}

}
